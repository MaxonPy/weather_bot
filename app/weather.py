import os
from dotenv import load_dotenv
from datetime import datetime
import aiohttp

load_dotenv()
WEATHER_TOKEN = os.getenv('WEATHER_TOKEN')


def format_date(date_str: str) -> str:
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "2024-07-12" –≤ "12 –∏—é–ª—è"

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        date_str(str): c—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2024-07-12"

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        form_date(str): –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    '''
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    date = datetime.strptime(date_str, '%Y-%m-%d')
    day = date.day
    month = months[date.month]
    form_date = f"{day} {month}"
    return form_date


def wind_direction(degrees: int) -> str:
    '''
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞–¥—É—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    –≤ –ø—Ä–∏–≤—ã—á–Ω—ã–π –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Ñ–æ—Ä–º–∞—Ç

    :param degrees: –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    :return: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    '''
    degrees = int(degrees)
    if (degrees >= 0 and degrees <= 22.5) or (degrees > 337.5 and degrees <= 360):
        return "—Å–µ–≤–µ—Ä–Ω–æ–µ"
    elif degrees > 22.5 and degrees <= 67.5:
        return "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ"
    elif degrees > 67.5 and degrees <= 112.5:
        return "–≤–æ—Å—Ç–æ—á–Ω–æ–µ"
    elif degrees > 112.5 and degrees <= 157.5:
        return "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ"
    elif degrees > 157.5 and degrees <= 202.5:
        return "—é–∂–Ω–æ–µ"
    elif degrees > 202.5 and degrees <= 247.5:
        return "—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ"
    elif degrees > 247.5 and degrees <= 292.5:
        return "–∑–∞–ø–∞–¥–Ω–æ–µ"
    elif degrees > 292.5 and degrees <= 337.5:
        return "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ"
    else:
        return "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞–¥—É—Å–æ–≤"  #


async def check_status(city):
    '''
    –§—É–Ω–∫–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    :param city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return:
        True - –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        False - –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

    '''
    url = f'http://api.weatherapi.com/v1/current.json?key={WEATHER_TOKEN}&q={city}&aqi=no&lang=ru'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            status = response.status
            if status == 200:
                return True


async def get_current_weather(city: str) -> str:
    '''
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    :param city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
    '''
    url = f'http://api.weatherapi.com/v1/current.json?key={WEATHER_TOKEN}&q={city}&aqi=no&lang=ru'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞'
            data = await response.json()
            temp = data['current']['temp_c']
            wind_speed = data['current']['wind_mph']
            wind_deg = data['current']['wind_degree']
            weat_description = data['current']['condition']['text']
            return (f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ä–∞–≤–Ω–∞: {int(temp)}¬∞–°.\n–ù–∞ —É–ª–∏—Ü–µ {weat_description}.\n'
                    f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind_speed} –º/c, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_direction(wind_deg)}')


async def get_forecast_weather(city):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 4 –¥–Ω—è
    :param city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
    '''
    url = f'http://api.weatherapi.com/v1/forecast.json?key={WEATHER_TOKEN}&q={city}&days=4&aqi=no&alerts=no&lang=ru'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞'
            data = await response.json()
            forecast_days = data['forecast']['forecastday']
            forecast_message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è:\n\n"

        for day in forecast_days:
            date = format_date(day['date'])
            morning = day['hour'][8]  # 08:00
            afternoon = day['hour'][13]  # 13:00
            evening = day['hour'][20]  # 20:00

            forecast_message += f"üìå{date}\n"
            forecast_message += (
                f"<b>‚òÄÔ∏è–£—Ç—Ä–æ–º 08:00</b>. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - <b><i>{morning['temp_c']}¬∞C</i></b>. "
                f"{morning['condition']['text']}. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - <i>{wind_direction(morning['wind_degree'])}</i> {morning['wind_kph']} –º/—Å\n"
            )
            forecast_message += (
                f"<b>üå§Ô∏è–î–Ω–µ–º 13:00</b>. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - <b><i>{afternoon['temp_c']}¬∞C</i></b>. "
                f"{afternoon['condition']['text']}. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - <i>{wind_direction(afternoon['wind_degree'])}</i> {afternoon['wind_kph']} –º/—Å\n"
            )
            forecast_message += (
                f"<b>üåô–í–µ—á–µ—Ä–æ–º 20:00</b>. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - <b><i>{evening['temp_c']}¬∞C</i></b>. "
                f"{evening['condition']['text']}. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ - <i>{wind_direction(evening['wind_degree'])}</i> {evening['wind_kph']} –º/—Å\n"
            )
            forecast_message += "\n"

        return forecast_message
